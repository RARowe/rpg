if (!c.gameEventHasHappened(GameEvent::FOUND_ENCRYPTED_COMPACT_DISK))
{
    inventory_add_item(c.inventory, ItemType::ENCRYPTED_CD);
    c.registerStateTransition(c.player, (int)PlayerStateType::ITEM_FOUND, 3.0f);
    c.requestOpenTextBox(TileSets::ITEMS, (int)ItemSheetTexture::CD, "Found 'Encrypted compact disk'.");
    c.audio.playSound("audio/found_item.ogg");
    c.broadcastGameEvent(GameEvent::FOUND_ENCRYPTED_COMPACT_DISK);
}
else
{
    c.requestOpenTextBox("tim.png", "It's a newspaper rack.");
}
if (!c.gameEventHasHappened(GameEvent::FOUND_CABINET_KEY))
{
    inventory_add_item(c.inventory, ItemType::CABINET_KEY);
    c.registerStateTransition(c.player, (int)PlayerStateType::ITEM_FOUND, 3.0f);
    c.requestOpenTextBox(TileSets::ITEMS, (int)ItemSheetTexture::KEY, "Found 'Cabinet key'.");
    c.audio.playSound("audio/found_item.ogg");
    c.broadcastGameEvent(GameEvent::FOUND_CABINET_KEY);
}

if (c.gameEventHasHappened(GameEvent::FOUND_CABINET_KEY))
{
    if (c.gameEventHasHappened(GameEvent::LONELY_TOWN_OUTSKIRTS_BUILDING_ITEM_FOUND))
    {
        c.requestOpenTextBox("tim.png", "It's an empty cabinet.");
    }
    else
    {
        inventory_add_item(c.inventory, ItemType::BASS_STRINGS);
        c.registerStateTransition(c.player, (int)PlayerStateType::ITEM_FOUND, 3.0f);
        c.requestOpenTextBox(TileSets::ITEMS, (int)ItemSheetTexture::STRINGS, "Found 'Bass strings'.");
        c.audio.playSound("audio/found_item.ogg");
        c.broadcastGameEvent(GameEvent::LONELY_TOWN_OUTSKIRTS_BUILDING_ITEM_FOUND);
        inventory_take_item(c.inventory, ItemType::CABINET_KEY);
    }
}
else
{
    c.requestOpenTextBox("tim.png", "It's locked... I wonder what's inside... Then again, this isn't my house!");
}

    if (i.select)
    {
        // TODO: Implement interact logic
    }

// Buckethead options
    _menuItems.push_back(std::make_unique<MenuItem>(MenuItem(
        [](){},
        "Save"
    )));
    _menuItems.push_back(std::make_unique<MenuItem>(MenuItem(
        [](){},
        "Tip"
    )));
    _menuItems.push_back(std::make_unique<MenuItem>(MenuItem(
        [](){},
        "Life advice"
    )));
    _menuItems.push_back(std::make_unique<MenuItem>(MenuItem(
        [manager]() { manager->closeCurrentMenu(); },
        "Never mind"
    )));
